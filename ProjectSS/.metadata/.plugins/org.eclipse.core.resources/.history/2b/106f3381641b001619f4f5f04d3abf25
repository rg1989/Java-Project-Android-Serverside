package il.ac.hit.finalproject;

import java.util.List;
import java.util.Iterator;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.Configuration;


public class DAO implements IDAO {
	private SessionFactory factory;
	Session session = null;
	private static DAO instance = null;
	
	public static DAO GetInstance()
	{
		if(instance == null)
		{
			instance = new DAO();
		}
		
		return instance;
	}
	
	private DAO() {
		try{
		 //factory = new Configuration().configure().buildSessionFactory();
		factory = new AnnotationConfiguration().configure().buildSessionFactory();
		}catch(Throwable ex)
		{
			ex.printStackTrace();
		}
		
	}
	
	@Override
	public boolean AddListItem(ToDoListItem Item) throws ToDoListPlatformException {
		session = factory.openSession();
		session.beginTransaction();
		try{
		session.save(Item);
		session.getTransaction().commit();
		} catch(HibernateException e){
			System.out.println(e.getMessage());
			throw new ToDoListPlatformException();
		}
		finally{
			session.close();
			}
		return true;
	}

	@Override
	public boolean RemoveListItem(int ItemId) throws ToDoListPlatformException {
		session = factory.openSession();
		session.beginTransaction();
		ToDoListItem entity = new ToDoListItem();
		entity.setId(ItemId);
		session.delete(entity);
		session.close();
		return true;
	}

	@Override
	public void PrintItems() throws ToDoListPlatformException {
		session = factory.openSession();
		try{
		session.beginTransaction();
		List items = session.createQuery("from ToDoListItem").list();
		session.getTransaction().commit();
		System.out.println("There are " + items.size() + " items");
		Iterator i = items.iterator();
		while(i.hasNext())
		{
			System.out.println(i.next());
		}
		}catch(HibernateException e)
		{
			System.out.println("EEEEEEEEEEEEEEEE" + e.getMessage());
			session.getTransaction().rollback();
		}
		finally{
		session.close();
		}
	}
	
	
	public ToDoListItem[] SelectAllItems() throws ToDoListPlatformException {
		session = factory.openSession();
		List items = null;
		try{
		session.beginTransaction();
		items = session.createQuery("from ToDoListItem").list();
		session.getTransaction().commit();
		}catch(HibernateException e)
		{
			System.out.println("EEEEEEEEEEEEEEEE" + e.getMessage());
		}
		finally{
			session.close();
			}
		//session.close();
		if(items != null)
		{
			return (ToDoListItem[])items.toArray();
		}
		else return null;
	}
	
	
	public ToDoListItem[] GetItems()throws ToDoListPlatformException
	{
		session = factory.openSession();
		session.beginTransaction();
		List<ToDoListItem> ListItems = session.createQuery("from User").list();
		ToDoListItem[] arrayToReturn = (ToDoListItem[]) ListItems.toArray();
		return arrayToReturn;
	}
	
	public List<ToDoListItem> GetItemsTest()throws ToDoListPlatformException
	{
		session = factory.openSession();
		session.beginTransaction();
		List<ToDoListItem> ListItems = (List<ToDoListItem>)session.createQuery("from User").list();
		//ToDoListItem[] arrayToReturn = (ToDoListItem[]) ListItems.toArray();
		return ListItems;
	}

	@Override
	public boolean AddUser(User user) throws ToDoListPlatformException {
		session = factory.openSession();
		session.beginTransaction();
		session.save(user);
		session.getTransaction().commit();
		session.close();
		return true;
	}

	@Override
	public boolean RemoveUser(int userId) throws ToDoListPlatformException {
		session = factory.openSession();
		session.beginTransaction();
		User entity = new User();
		entity.setId(userId);
		session.delete(entity);
		session.close();
		return true;
	}

	@Override
	public User[] GetUsers() throws ToDoListPlatformException {
		
		return null;
	}

	@Override
	public void PrintUsers() throws ToDoListPlatformException {
		session = factory.openSession();
		session.beginTransaction();
		List ListItems = session.createQuery("from User").list();
		Iterator i = ListItems.iterator();
		while(i.hasNext())
		{
			System.out.println(i.next());
		}
		session.close();
	}

}
